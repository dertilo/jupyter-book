version: 2.1
jobs:
  run_tests:
    docker:
      - image: circleci/python:3.7-stretch
    steps:
      # Get our data and merge with upstream
      - run: sudo apt-get update
      - checkout

      #################################################################
      # Install dependencies
      #################################################################

      # Restore cached files to speed things up
      - restore_cache:
          keys:
            - cache-pip

      # Documentation-specific packages
      - run: pip install --user flake8 pytest-cov matplotlib numpy pandas
      - run: pip install --user -r requirements.txt
      - run: pip install --user -e ./  # Install Jupyter Book CLI

      # Cache some files for a speedup in subsequent builds
      - save_cache:
          key: cache-pip
          paths:
            - ~/.cache/pip

      #################################################################
      # Tests
      #################################################################

      - run:
          name: Tests
          command: |
            flake8 --count jupyter_book
            pytest --cov=./

      # Run code coverage
      - run:
          name: codecov deploy
          command: bash <(curl -s https://codecov.io/bash)

      #################################################################
      # Build the HTML for book pages if tests pass for next steps
      #################################################################

      - run:
          name: Build site intermediate files
          command: jupyter-book build jupyter_book/book_template/

      # Persist the built files for the deploy step
      - persist_to_workspace:
          root: .
          paths:
            - jupyter_book/book_template/_build/

      # Build a single-page's HTML so we can preview
      - run:
          name: Build individual pages to preview
          command: |
            cd jupyter_book/book_template/
            mkdir html_outputs
            jupyter-book page content/features/notebooks.ipynb -o html_outputs
            jupyter-book page content/features/jupytext.md -o html_outputs
            jupyter-book page content/features/markdown.md -o html_outputs

      - store_artifacts:
          path: jupyter_book/book_template/html_outputs
          destination: html_singlepage

  # This makes sure the site builds with the miniconda instructions, but we don't use it to demo the site
  build_site:
    docker:
      - image: circleci/python:3.7-stretch
    steps:
      - prepare_jekyll_installation
      - run:
          name: Build the website
          command: cd jupyter_book/book_template && bundle exec jekyll build --baseurl /0/html/


# Tell CircleCI to use this workflow when it builds the site
workflows:
  version: 2
  default:
    jobs:
      - run_tests:
          filters:
            branches:
              ignore:
                - gh-pages
      - build_site:
          requires:
            - run_tests
          filters:
            branches:
              ignore:
                - gh-pages

commands:
  prepare_jekyll_installation:
    steps:
      - checkout
      - attach_workspace:
          # Must be absolute path or relative path from working_directory
          at: /tmp/workspace

      # Grab the the built intermediate files from the last step
      - run:
          name: Copy over built site files
          command: |
            rm -rf jupyter_book/book_template/_build
            cp -r /tmp/workspace/jupyter_book/book_template/_build ./jupyter_book/book_template

      # Install miniconda to test install
      - run:
          name: install miniconda
          command: |
            export MINICONDA=$HOME/miniconda
            echo "export PATH=$MINICONDA/bin:$PATH" >> $BASH_ENV
            source $BASH_ENV
            hash -r
            wget https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh -O miniconda.sh
            bash miniconda.sh -b -f -p $MINICONDA
            conda config --set always_yes yes
            conda update conda
            conda info -a
            conda create -n testenv python=3.7.0
            source activate testenv
            rm miniconda.sh

      # Install Ruby/Jekyll dependencies
      - run:
          name: Installing Ruby/Jekyll from conda-forge
          command: conda install -c conda-forge rb-github-pages

      # Build the book's HTML w/ the base_url for CircleCI artifacts
      - run:
          name: Install book Ruby dependencies
          command: |
            export MINICONDA=$HOME/miniconda
            echo "export PATH=$MINICONDA/bin:$PATH" >> $BASH_ENV
            source $BASH_ENV
            pip install --user -e ./
            conda install gxx_linux-64
            cd jupyter_book/book_template
            rm Gemfile.lock
            make install
